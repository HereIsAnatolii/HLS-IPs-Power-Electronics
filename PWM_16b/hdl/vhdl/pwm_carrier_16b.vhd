-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pwm_carrier_16b is
port (
    ap_clk : IN STD_LOGIC;
    en : IN STD_LOGIC;
    magnitude : IN STD_LOGIC_VECTOR (15 downto 0);
    step : IN STD_LOGIC_VECTOR (15 downto 0);
    duty : IN STD_LOGIC_VECTOR (15 downto 0);
    pwm : OUT STD_LOGIC;
    sync : OUT STD_LOGIC;
    carrier : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pwm_carrier_16b is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pwm_carrier_16b_pwm_carrier_16b,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.182482,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=34,HLS_SYN_LUT=194,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_0_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_0_3 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_0_4 : STD_LOGIC_VECTOR (0 downto 0) := "0";

    signal cnt : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal direction : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal duty_sampled : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_phi_mux_empty_phi_fu_100_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal en_read_read_fu_70_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal direction_load_load_fu_155_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_empty_5_phi_fu_121_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln47_fu_218_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln37_fu_187_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_duty_sampled_load : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln35_fu_163_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln35_1_fu_167_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln35_2_fu_171_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln35_1_fu_167_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln35_2_fu_171_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln35_fu_175_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln35_fu_163_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln37_fu_187_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln37_fu_187_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln45_fu_212_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln45_fu_212_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln47_fu_218_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln47_fu_218_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_condition_38 : BOOLEAN;
    signal ap_condition_52 : BOOLEAN;
    signal ap_condition_48 : BOOLEAN;
    signal ap_condition_42 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS_fsm <= ap_NS_fsm;
        end if;
    end process;

    cnt_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_boolean_1 = ap_condition_38)) then 
                    cnt <= ap_const_lv16_0_2;
                elsif ((ap_const_boolean_1 = ap_condition_42)) then 
                    cnt <= sub_ln47_fu_218_p2;
                elsif ((ap_const_boolean_1 = ap_condition_48)) then 
                    cnt <= magnitude;
                elsif ((ap_const_boolean_1 = ap_condition_52)) then 
                    cnt <= add_ln37_fu_187_p2;
                elsif ((en_read_read_fu_70_p2 = ap_const_lv1_0)) then 
                    cnt <= ap_const_lv16_0_1;
                end if;
            end if; 
        end if;
    end process;

    direction_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_boolean_1 = ap_condition_38)) then 
                    direction <= ap_const_lv1_0_4;
                elsif ((ap_const_boolean_1 = ap_condition_48)) then 
                    direction <= ap_const_lv1_1;
                elsif ((en_read_read_fu_70_p2 = ap_const_lv1_0)) then 
                    direction <= ap_const_lv1_0_3;
                end if;
            end if; 
        end if;
    end process;

    duty_sampled_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((ap_const_boolean_1 = ap_condition_38)) then 
                    duty_sampled <= duty;
                elsif ((en_read_read_fu_70_p2 = ap_const_lv1_0)) then 
                    duty_sampled <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln37_fu_187_p0 <= cnt;
    add_ln37_fu_187_p1 <= step;
    add_ln37_fu_187_p2 <= std_logic_vector(signed(add_ln37_fu_187_p0) + signed(add_ln37_fu_187_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_ST_fsm_state1_blk <= ap_const_logic_0;

    ap_condition_38_assign_proc : process(en_read_read_fu_70_p2, direction_load_load_fu_155_p1, icmp_ln45_fu_212_p2)
    begin
                ap_condition_38 <= ((icmp_ln45_fu_212_p2 = ap_const_lv1_1) and (direction_load_load_fu_155_p1 = ap_const_lv1_1) and (en_read_read_fu_70_p2 = ap_const_lv1_1));
    end process;


    ap_condition_42_assign_proc : process(en_read_read_fu_70_p2, direction_load_load_fu_155_p1, icmp_ln45_fu_212_p2)
    begin
                ap_condition_42 <= ((icmp_ln45_fu_212_p2 = ap_const_lv1_0) and (direction_load_load_fu_155_p1 = ap_const_lv1_1) and (en_read_read_fu_70_p2 = ap_const_lv1_1));
    end process;


    ap_condition_48_assign_proc : process(en_read_read_fu_70_p2, direction_load_load_fu_155_p1, icmp_ln35_fu_181_p2)
    begin
                ap_condition_48 <= ((icmp_ln35_fu_181_p2 = ap_const_lv1_1) and (direction_load_load_fu_155_p1 = ap_const_lv1_0) and (en_read_read_fu_70_p2 = ap_const_lv1_1));
    end process;


    ap_condition_52_assign_proc : process(en_read_read_fu_70_p2, direction_load_load_fu_155_p1, icmp_ln35_fu_181_p2)
    begin
                ap_condition_52 <= ((icmp_ln35_fu_181_p2 = ap_const_lv1_0) and (direction_load_load_fu_155_p1 = ap_const_lv1_0) and (en_read_read_fu_70_p2 = ap_const_lv1_1));
    end process;


    ap_phi_mux_empty_5_phi_fu_121_p10_assign_proc : process(magnitude, ap_CS_fsm_state1, en_read_read_fu_70_p2, direction_load_load_fu_155_p1, icmp_ln45_fu_212_p2, icmp_ln35_fu_181_p2, sub_ln47_fu_218_p2, add_ln37_fu_187_p2)
    begin
        if (((icmp_ln35_fu_181_p2 = ap_const_lv1_0) and (direction_load_load_fu_155_p1 = ap_const_lv1_0) and (en_read_read_fu_70_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_empty_5_phi_fu_121_p10 <= add_ln37_fu_187_p2;
        elsif (((icmp_ln35_fu_181_p2 = ap_const_lv1_1) and (direction_load_load_fu_155_p1 = ap_const_lv1_0) and (en_read_read_fu_70_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_empty_5_phi_fu_121_p10 <= magnitude;
        elsif (((icmp_ln45_fu_212_p2 = ap_const_lv1_0) and (direction_load_load_fu_155_p1 = ap_const_lv1_1) and (en_read_read_fu_70_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_empty_5_phi_fu_121_p10 <= sub_ln47_fu_218_p2;
        elsif ((((icmp_ln45_fu_212_p2 = ap_const_lv1_1) and (direction_load_load_fu_155_p1 = ap_const_lv1_1) and (en_read_read_fu_70_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((en_read_read_fu_70_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_empty_5_phi_fu_121_p10 <= ap_const_lv16_0;
        else 
            ap_phi_mux_empty_5_phi_fu_121_p10 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_empty_phi_fu_100_p10_assign_proc : process(ap_CS_fsm_state1, en_read_read_fu_70_p2, direction_load_load_fu_155_p1, icmp_ln45_fu_212_p2, icmp_ln35_fu_181_p2)
    begin
        if ((((icmp_ln35_fu_181_p2 = ap_const_lv1_1) and (direction_load_load_fu_155_p1 = ap_const_lv1_0) and (en_read_read_fu_70_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln45_fu_212_p2 = ap_const_lv1_0) and (direction_load_load_fu_155_p1 = ap_const_lv1_1) and (en_read_read_fu_70_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_empty_phi_fu_100_p10 <= ap_const_lv1_1;
        elsif ((((icmp_ln35_fu_181_p2 = ap_const_lv1_0) and (direction_load_load_fu_155_p1 = ap_const_lv1_0) and (en_read_read_fu_70_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln45_fu_212_p2 = ap_const_lv1_1) and (direction_load_load_fu_155_p1 = ap_const_lv1_1) and (en_read_read_fu_70_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((en_read_read_fu_70_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_empty_phi_fu_100_p10 <= ap_const_lv1_0;
        else 
            ap_phi_mux_empty_phi_fu_100_p10 <= "X";
        end if; 
    end process;


    ap_sig_allocacmp_duty_sampled_load_assign_proc : process(duty, duty_sampled, ap_CS_fsm_state1, en_read_read_fu_70_p2, ap_condition_38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ap_const_boolean_1 = ap_condition_38)) then 
                ap_sig_allocacmp_duty_sampled_load <= duty;
            elsif ((en_read_read_fu_70_p2 = ap_const_lv1_0)) then 
                ap_sig_allocacmp_duty_sampled_load <= ap_const_lv16_0;
            else 
                ap_sig_allocacmp_duty_sampled_load <= duty_sampled;
            end if;
        else 
            ap_sig_allocacmp_duty_sampled_load <= duty_sampled;
        end if; 
    end process;

    carrier <= ap_phi_mux_empty_5_phi_fu_121_p10;
    direction_load_load_fu_155_p1 <= direction;
    en_read_read_fu_70_p2 <= (0=>en, others=>'-');
    icmp_ln35_fu_181_p2 <= "1" when (signed(sub_ln35_fu_175_p2) < signed(sext_ln35_fu_163_p1)) else "0";
    icmp_ln45_fu_212_p0 <= cnt;
    icmp_ln45_fu_212_p1 <= step;
    icmp_ln45_fu_212_p2 <= "1" when (signed(icmp_ln45_fu_212_p0) < signed(icmp_ln45_fu_212_p1)) else "0";
    pwm <= '1' when (signed(ap_sig_allocacmp_duty_sampled_load) > signed(ap_phi_mux_empty_5_phi_fu_121_p10)) else '0';
    sext_ln35_1_fu_167_p0 <= magnitude;
        sext_ln35_1_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln35_1_fu_167_p0),17));

    sext_ln35_2_fu_171_p0 <= step;
        sext_ln35_2_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln35_2_fu_171_p0),17));

    sext_ln35_fu_163_p0 <= cnt;
        sext_ln35_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln35_fu_163_p0),17));

    sub_ln35_fu_175_p2 <= std_logic_vector(signed(sext_ln35_1_fu_167_p1) - signed(sext_ln35_2_fu_171_p1));
    sub_ln47_fu_218_p0 <= cnt;
    sub_ln47_fu_218_p1 <= step;
    sub_ln47_fu_218_p2 <= std_logic_vector(signed(sub_ln47_fu_218_p0) - signed(sub_ln47_fu_218_p1));
    sync <= ap_phi_mux_empty_phi_fu_100_p10(0);
end behav;
