// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pwm_carrier_16b_pwm_carrier_16b,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.182482,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=34,HLS_SYN_LUT=194,HLS_VERSION=2022_2}" *)

module pwm_carrier_16b (
        ap_clk,
        en,
        magnitude,
        step,
        duty,
        pwm,
        sync,
        carrier
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   en;
input  [15:0] magnitude;
input  [15:0] step;
input  [15:0] duty;
output   pwm;
output   sync;
output  [15:0] carrier;

reg   [15:0] cnt;
reg   [0:0] direction;
reg   [15:0] duty_sampled;
reg   [0:0] ap_phi_mux_empty_phi_fu_100_p10;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] en_read_read_fu_70_p2;
wire   [0:0] direction_load_load_fu_155_p1;
wire   [0:0] icmp_ln45_fu_212_p2;
wire   [0:0] icmp_ln35_fu_181_p2;
reg   [15:0] ap_phi_mux_empty_5_phi_fu_121_p10;
wire   [15:0] sub_ln47_fu_218_p2;
wire   [15:0] add_ln37_fu_187_p2;
reg   [15:0] ap_sig_allocacmp_duty_sampled_load;
wire  signed [15:0] sext_ln35_fu_163_p0;
wire  signed [15:0] sext_ln35_1_fu_167_p0;
wire  signed [15:0] sext_ln35_2_fu_171_p0;
wire  signed [16:0] sext_ln35_1_fu_167_p1;
wire  signed [16:0] sext_ln35_2_fu_171_p1;
wire   [16:0] sub_ln35_fu_175_p2;
wire  signed [16:0] sext_ln35_fu_163_p1;
wire  signed [15:0] add_ln37_fu_187_p0;
wire  signed [15:0] add_ln37_fu_187_p1;
wire  signed [15:0] icmp_ln45_fu_212_p0;
wire  signed [15:0] icmp_ln45_fu_212_p1;
wire  signed [15:0] sub_ln47_fu_218_p0;
wire  signed [15:0] sub_ln47_fu_218_p1;
reg   [0:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
reg    ap_condition_38;
reg    ap_condition_52;
reg    ap_condition_48;
reg    ap_condition_42;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 cnt = 16'd0;
#0 direction = 1'd0;
#0 duty_sampled = 16'd0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    ap_CS_fsm <= ap_NS_fsm;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((1'b1 == ap_condition_38)) begin
            cnt <= 16'd0;
        end else if ((1'b1 == ap_condition_42)) begin
            cnt <= sub_ln47_fu_218_p2;
        end else if ((1'b1 == ap_condition_48)) begin
            cnt <= magnitude;
        end else if ((1'b1 == ap_condition_52)) begin
            cnt <= add_ln37_fu_187_p2;
        end else if ((en_read_read_fu_70_p2 == 1'd0)) begin
            cnt <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((1'b1 == ap_condition_38)) begin
            direction <= 1'd0;
        end else if ((1'b1 == ap_condition_48)) begin
            direction <= 1'd1;
        end else if ((en_read_read_fu_70_p2 == 1'd0)) begin
            direction <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((1'b1 == ap_condition_38)) begin
            duty_sampled <= duty;
        end else if ((en_read_read_fu_70_p2 == 1'd0)) begin
            duty_sampled <= 16'd0;
        end
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln35_fu_181_p2 == 1'd0) & (direction_load_load_fu_155_p1 == 1'd0) & (en_read_read_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_empty_5_phi_fu_121_p10 = add_ln37_fu_187_p2;
    end else if (((icmp_ln35_fu_181_p2 == 1'd1) & (direction_load_load_fu_155_p1 == 1'd0) & (en_read_read_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_empty_5_phi_fu_121_p10 = magnitude;
    end else if (((icmp_ln45_fu_212_p2 == 1'd0) & (direction_load_load_fu_155_p1 == 1'd1) & (en_read_read_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_empty_5_phi_fu_121_p10 = sub_ln47_fu_218_p2;
    end else if ((((icmp_ln45_fu_212_p2 == 1'd1) & (direction_load_load_fu_155_p1 == 1'd1) & (en_read_read_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((en_read_read_fu_70_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_empty_5_phi_fu_121_p10 = 16'd0;
    end else begin
        ap_phi_mux_empty_5_phi_fu_121_p10 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln35_fu_181_p2 == 1'd1) & (direction_load_load_fu_155_p1 == 1'd0) & (en_read_read_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln45_fu_212_p2 == 1'd0) & (direction_load_load_fu_155_p1 == 1'd1) & (en_read_read_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_empty_phi_fu_100_p10 = 1'd1;
    end else if ((((icmp_ln35_fu_181_p2 == 1'd0) & (direction_load_load_fu_155_p1 == 1'd0) & (en_read_read_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln45_fu_212_p2 == 1'd1) & (direction_load_load_fu_155_p1 == 1'd1) & (en_read_read_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((en_read_read_fu_70_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_empty_phi_fu_100_p10 = 1'd0;
    end else begin
        ap_phi_mux_empty_phi_fu_100_p10 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((1'b1 == ap_condition_38)) begin
            ap_sig_allocacmp_duty_sampled_load = duty;
        end else if ((en_read_read_fu_70_p2 == 1'd0)) begin
            ap_sig_allocacmp_duty_sampled_load = 16'd0;
        end else begin
            ap_sig_allocacmp_duty_sampled_load = duty_sampled;
        end
    end else begin
        ap_sig_allocacmp_duty_sampled_load = duty_sampled;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln37_fu_187_p0 = cnt;

assign add_ln37_fu_187_p1 = step;

assign add_ln37_fu_187_p2 = ($signed(add_ln37_fu_187_p0) + $signed(add_ln37_fu_187_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_condition_38 = ((icmp_ln45_fu_212_p2 == 1'd1) & (direction_load_load_fu_155_p1 == 1'd1) & (en_read_read_fu_70_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_42 = ((icmp_ln45_fu_212_p2 == 1'd0) & (direction_load_load_fu_155_p1 == 1'd1) & (en_read_read_fu_70_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_48 = ((icmp_ln35_fu_181_p2 == 1'd1) & (direction_load_load_fu_155_p1 == 1'd0) & (en_read_read_fu_70_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_52 = ((icmp_ln35_fu_181_p2 == 1'd0) & (direction_load_load_fu_155_p1 == 1'd0) & (en_read_read_fu_70_p2 == 1'd1));
end

assign carrier = ap_phi_mux_empty_5_phi_fu_121_p10;

assign direction_load_load_fu_155_p1 = direction;

assign en_read_read_fu_70_p2 = en;

assign icmp_ln35_fu_181_p2 = (($signed(sub_ln35_fu_175_p2) < $signed(sext_ln35_fu_163_p1)) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_212_p0 = cnt;

assign icmp_ln45_fu_212_p1 = step;

assign icmp_ln45_fu_212_p2 = (($signed(icmp_ln45_fu_212_p0) < $signed(icmp_ln45_fu_212_p1)) ? 1'b1 : 1'b0);

assign pwm = (($signed(ap_sig_allocacmp_duty_sampled_load) > $signed(ap_phi_mux_empty_5_phi_fu_121_p10)) ? 1'b1 : 1'b0);

assign sext_ln35_1_fu_167_p0 = magnitude;

assign sext_ln35_1_fu_167_p1 = sext_ln35_1_fu_167_p0;

assign sext_ln35_2_fu_171_p0 = step;

assign sext_ln35_2_fu_171_p1 = sext_ln35_2_fu_171_p0;

assign sext_ln35_fu_163_p0 = cnt;

assign sext_ln35_fu_163_p1 = sext_ln35_fu_163_p0;

assign sub_ln35_fu_175_p2 = ($signed(sext_ln35_1_fu_167_p1) - $signed(sext_ln35_2_fu_171_p1));

assign sub_ln47_fu_218_p0 = cnt;

assign sub_ln47_fu_218_p1 = step;

assign sub_ln47_fu_218_p2 = ($signed(sub_ln47_fu_218_p0) - $signed(sub_ln47_fu_218_p1));

assign sync = ap_phi_mux_empty_phi_fu_100_p10;

endmodule //pwm_carrier_16b
